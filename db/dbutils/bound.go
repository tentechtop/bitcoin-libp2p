package dbutils

const maxByte = byte(255)

// 计算给定前缀字节序列的“下一个”前缀。
// 换句话说：给定一个 key 前缀，求出比它大、且刚好比所有以该前缀开头的 key 都大的最小前缀。
// 用途：在进行“前缀扫描”时，用它作为上界（end boundary）。
// 数据库常见的迭代区间是 [startPrefix, endPrefix)，这个函数就负责生成 endPrefix。
//	[1]     	  -> [2]
//	[1, 255, 255] -> [2]
//	[1, 2, 255]   -> [1, 3]
//	[255, 255]    -> nil
//逐条解释：
//[1] → [2]
//只有一个字节 0x01，加 1 得到 0x02，于是新的前缀就是 [2]。
//区间 [1, 2) 正好覆盖所有以 1 开头的 key。
//[1, 255, 255] → [2]
//从后往前找第一个不是 255 的字节；结果所有字节都是 255。
//于是把整个前缀“进位”到更高位：[1,255,255] + 1 = [2]。
//[1, 2, 255] → [1, 3]
//倒数第二个字节 2 不是 255，把它加 1 并截断后面的 255，得到 [1, 3]。
//区间 [1,2,255, ...) 到 [1,3) 正好覆盖所有以 [1,2] 开头的 key。
//[255, 255] → nil
//所有字节都是 255，再加 1 会溢出，因此返回 nil 表示“没有更大的前缀”，
//此时通常把扫描上界留空（一直迭代到数据库末尾）。
//一句话总结
//UpperBound 就是“给一个前缀，算出刚好比它大的最小前缀”，用来做范围查询的结束边界。

func UpperBound(prefix []byte) []byte {
	var ub []byte

	for i := len(prefix) - 1; i >= 0; i-- {
		if prefix[i] == maxByte {
			continue
		}
		ub = make([]byte, i+1)
		copy(ub, prefix)
		ub[i]++
		return ub
	}

	return nil
}
