// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v6.31.1
// source: bitcoin.proto

//import "tx.proto";        // 复用前面定义的 ProtoMsgTx

package wire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 连接方向（参考 btcd 的 ConnDirection）
type ConnectionDirection int32

const (
	ConnectionDirection_DIR_UNKNOWN  ConnectionDirection = 0 // 未知方向
	ConnectionDirection_DIR_INBOUND  ConnectionDirection = 1 // 入站连接（其他节点主动连接本地）
	ConnectionDirection_DIR_OUTBOUND ConnectionDirection = 2 // 出站连接（本地主动连接其他节点）
)

// Enum value maps for ConnectionDirection.
var (
	ConnectionDirection_name = map[int32]string{
		0: "DIR_UNKNOWN",
		1: "DIR_INBOUND",
		2: "DIR_OUTBOUND",
	}
	ConnectionDirection_value = map[string]int32{
		"DIR_UNKNOWN":  0,
		"DIR_INBOUND":  1,
		"DIR_OUTBOUND": 2,
	}
)

func (x ConnectionDirection) Enum() *ConnectionDirection {
	p := new(ConnectionDirection)
	*p = x
	return p
}

func (x ConnectionDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectionDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_proto_enumTypes[0].Descriptor()
}

func (ConnectionDirection) Type() protoreflect.EnumType {
	return &file_bitcoin_proto_enumTypes[0]
}

func (x ConnectionDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectionDirection.Descriptor instead.
func (ConnectionDirection) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{0}
}

// 握手状态
type HandshakeStatus int32

const (
	HandshakeStatus_HANDSHAKE_NOT_STARTED HandshakeStatus = 0 // 未开始
	HandshakeStatus_HANDSHAKE_IN_PROGRESS HandshakeStatus = 1 // 进行中
	HandshakeStatus_HANDSHAKE_COMPLETED   HandshakeStatus = 2 // 已完成
	HandshakeStatus_HANDSHAKE_FAILED      HandshakeStatus = 3 // 已失败
)

// Enum value maps for HandshakeStatus.
var (
	HandshakeStatus_name = map[int32]string{
		0: "HANDSHAKE_NOT_STARTED",
		1: "HANDSHAKE_IN_PROGRESS",
		2: "HANDSHAKE_COMPLETED",
		3: "HANDSHAKE_FAILED",
	}
	HandshakeStatus_value = map[string]int32{
		"HANDSHAKE_NOT_STARTED": 0,
		"HANDSHAKE_IN_PROGRESS": 1,
		"HANDSHAKE_COMPLETED":   2,
		"HANDSHAKE_FAILED":      3,
	}
)

func (x HandshakeStatus) Enum() *HandshakeStatus {
	p := new(HandshakeStatus)
	*p = x
	return p
}

func (x HandshakeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandshakeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_proto_enumTypes[1].Descriptor()
}

func (HandshakeStatus) Type() protoreflect.EnumType {
	return &file_bitcoin_proto_enumTypes[1]
}

func (x HandshakeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandshakeStatus.Descriptor instead.
func (HandshakeStatus) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{1}
}

// 节点服务能力标志（参考 btcd 的 ServiceFlag）
type ServiceFlag int32

const (
	ServiceFlag_SERVICE_NONE      ServiceFlag = 0 // 无特殊服务
	ServiceFlag_SERVICE_FULL_NODE ServiceFlag = 1 // 全节点（存储完整区块链）
	ServiceFlag_SERVICE_SPV       ServiceFlag = 2 // SPV节点（简化支付验证）
	ServiceFlag_SERVICE_MINER     ServiceFlag = 4 // 挖矿节点（支持挖矿相关消息）
	ServiceFlag_SERVICE_RELAY     ServiceFlag = 8 // 中继节点（转发交易和区块）
	ServiceFlag_SFNodeNetwork     ServiceFlag = 16
	// 表示节点支持 getutxos 和 utxos 命令，对应 BIP0064 协议。这些命令用于查询未花费交易输出（UTXO）集合，帮助其他节点快速获取特定地址的可用资金信息。
	ServiceFlag_SFNodeGetUTXO ServiceFlag = 32
	// 表示节点支持「布隆过滤」（bloom filtering）功能。布隆过滤器是轻量级节点（如 SPV 节点）常用的技术，可高效筛选出与自身相关的交易，减少不必要的数据传输（例如只同步涉及自己地址的交易）。
	ServiceFlag_SFNodeBloom ServiceFlag = 64
	// 表示节点支持包含「见证数据」（witness data）的区块和交易，对应 BIP0144 协议（隔离见证，Segregated Witness）。隔离见证将交易的签名数据（见证）与交易核心数据分离，提升了交易容量和安全性，该标志说明节点可处理这类新型交易和区块。
	ServiceFlag_SFNodeWitness ServiceFlag = 128
	// 表示节点支持「xthin blocks」（精简区块）。这是一种区块传播优化技术，类似于「紧凑区块」（compact blocks），通过只传输区块中必要的差异数据（而非完整区块），减少网络带宽消耗，加快区块同步速度。
	ServiceFlag_SFNodeXthin ServiceFlag = 256
	// 占位标志，用于表示第 5 位定义的服务。具体功能未在注释中说明，可能是预留位或特定实现中自定义的扩展功能。
	ServiceFlag_SFNodeBit5 ServiceFlag = 512
	// 表示节点支持「承诺过滤器」（committed filters，CFs），对应 BIP157 和 BIP158 协议。承诺过滤器是一种带密码学承诺的区块过滤机制，帮助轻节点快速定位包含目标交易的区块，同时保证过滤结果的真实性
	ServiceFlag_SFNodeCF ServiceFlag = 1024
	// 表示节点运行「Segwit2X」软件。Segwit2X 是 2017 年的一个比特币协议提案，计划结合隔离见证（Segwit）和区块大小扩容至 2MB，该标志用于识别支持该提案的节点（注：该提案最终未被广泛采用）。
	ServiceFlag_SFNode2X ServiceFlag = 2048
	// 表示节点支持仅提供「最近 288 个区块」的数据（约 1 天的区块量，按 10 分钟一个区块计算）。这是一种轻量版全节点，不存储完整区块链历史，仅保留近期数据，适合资源有限的设备。
	ServiceFlag_SFNodeNetworkLimited ServiceFlag = 4096
	// 表示节点支持 BIP324 定义的「P2P 协议 v2」。该版本协议引入了加密通信、更高效的握手机制等改进，提升了节点间通信的安全性和兼容性。
	ServiceFlag_SFNodeP2PV2 ServiceFlag = 8192
)

// Enum value maps for ServiceFlag.
var (
	ServiceFlag_name = map[int32]string{
		0:    "SERVICE_NONE",
		1:    "SERVICE_FULL_NODE",
		2:    "SERVICE_SPV",
		4:    "SERVICE_MINER",
		8:    "SERVICE_RELAY",
		16:   "SFNodeNetwork",
		32:   "SFNodeGetUTXO",
		64:   "SFNodeBloom",
		128:  "SFNodeWitness",
		256:  "SFNodeXthin",
		512:  "SFNodeBit5",
		1024: "SFNodeCF",
		2048: "SFNode2X",
		4096: "SFNodeNetworkLimited",
		8192: "SFNodeP2PV2",
	}
	ServiceFlag_value = map[string]int32{
		"SERVICE_NONE":         0,
		"SERVICE_FULL_NODE":    1,
		"SERVICE_SPV":          2,
		"SERVICE_MINER":        4,
		"SERVICE_RELAY":        8,
		"SFNodeNetwork":        16,
		"SFNodeGetUTXO":        32,
		"SFNodeBloom":          64,
		"SFNodeWitness":        128,
		"SFNodeXthin":          256,
		"SFNodeBit5":           512,
		"SFNodeCF":             1024,
		"SFNode2X":             2048,
		"SFNodeNetworkLimited": 4096,
		"SFNodeP2PV2":          8192,
	}
)

func (x ServiceFlag) Enum() *ServiceFlag {
	p := new(ServiceFlag)
	*p = x
	return p
}

func (x ServiceFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_proto_enumTypes[2].Descriptor()
}

func (ServiceFlag) Type() protoreflect.EnumType {
	return &file_bitcoin_proto_enumTypes[2]
}

func (x ServiceFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceFlag.Descriptor instead.
func (ServiceFlag) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{2}
}

// 定义库存向量类型（对应InvType）
type InvType int32

const (
	InvType_INV_TYPE_ERROR                  InvType = 0          // 错误类型（对应Go的InvTypeError）
	InvType_INV_TYPE_TX                     InvType = 1          // 普通交易（对应Go的InvTypeTx）
	InvType_INV_TYPE_BLOCK                  InvType = 2          // 普通区块（对应Go的InvTypeBlock）
	InvType_INV_TYPE_FILTERED_BLOCK         InvType = 3          // 过滤区块（对应Go的InvTypeFilteredBlock）
	InvType_INV_TYPE_WITNESS_TX             InvType = 1073741825 // 带见证数据的交易（1 | 1<<30，对应Go的InvTypeWitnessTx）
	InvType_INV_TYPE_WITNESS_BLOCK          InvType = 1073741826 // 带见证数据的区块（2 | 1<<30，对应Go的InvTypeWitnessBlock）
	InvType_INV_TYPE_FILTERED_WITNESS_BLOCK InvType = 1073741827 // 带见证数据的过滤区块（3 | 1<<30，对应Go的InvTypeFilteredWitnessBlock）
)

// Enum value maps for InvType.
var (
	InvType_name = map[int32]string{
		0:          "INV_TYPE_ERROR",
		1:          "INV_TYPE_TX",
		2:          "INV_TYPE_BLOCK",
		3:          "INV_TYPE_FILTERED_BLOCK",
		1073741825: "INV_TYPE_WITNESS_TX",
		1073741826: "INV_TYPE_WITNESS_BLOCK",
		1073741827: "INV_TYPE_FILTERED_WITNESS_BLOCK",
	}
	InvType_value = map[string]int32{
		"INV_TYPE_ERROR":                  0,
		"INV_TYPE_TX":                     1,
		"INV_TYPE_BLOCK":                  2,
		"INV_TYPE_FILTERED_BLOCK":         3,
		"INV_TYPE_WITNESS_TX":             1073741825,
		"INV_TYPE_WITNESS_BLOCK":          1073741826,
		"INV_TYPE_FILTERED_WITNESS_BLOCK": 1073741827,
	}
)

func (x InvType) Enum() *InvType {
	p := new(InvType)
	*p = x
	return p
}

func (x InvType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvType) Descriptor() protoreflect.EnumDescriptor {
	return file_bitcoin_proto_enumTypes[3].Descriptor()
}

func (InvType) Type() protoreflect.EnumType {
	return &file_bitcoin_proto_enumTypes[3]
}

func (x InvType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvType.Descriptor instead.
func (InvType) EnumDescriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{3}
}

type ProtoBlockBodyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BodyList []*ProtoMsgBlockBody `protobuf:"bytes,1,rep,name=body_list,json=bodyList,proto3" json:"body_list,omitempty"`
}

func (x *ProtoBlockBodyList) Reset() {
	*x = ProtoBlockBodyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBlockBodyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBlockBodyList) ProtoMessage() {}

func (x *ProtoBlockBodyList) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBlockBodyList.ProtoReflect.Descriptor instead.
func (*ProtoBlockBodyList) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoBlockBodyList) GetBodyList() []*ProtoMsgBlockBody {
	if x != nil {
		return x.BodyList
	}
	return nil
}

type ProtoGetBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashList [][]byte `protobuf:"bytes,1,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
}

func (x *ProtoGetBlock) Reset() {
	*x = ProtoGetBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoGetBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGetBlock) ProtoMessage() {}

func (x *ProtoGetBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGetBlock.ProtoReflect.Descriptor instead.
func (*ProtoGetBlock) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{1}
}

func (x *ProtoGetBlock) GetHashList() [][]byte {
	if x != nil {
		return x.HashList
	}
	return nil
}

type ProtoGetHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartHeight int32  `protobuf:"varint,1,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	EndHeight   int32  `protobuf:"varint,2,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"`
	EndHash     []byte `protobuf:"bytes,3,opt,name=end_hash,json=endHash,proto3" json:"end_hash,omitempty"`
}

func (x *ProtoGetHeaders) Reset() {
	*x = ProtoGetHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoGetHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoGetHeaders) ProtoMessage() {}

func (x *ProtoGetHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoGetHeaders.ProtoReflect.Descriptor instead.
func (*ProtoGetHeaders) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{2}
}

func (x *ProtoGetHeaders) GetStartHeight() int32 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *ProtoGetHeaders) GetEndHeight() int32 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *ProtoGetHeaders) GetEndHash() []byte {
	if x != nil {
		return x.EndHash
	}
	return nil
}

type ProtoHeaderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderList []*ProtoBlockHeader `protobuf:"bytes,1,rep,name=header_list,json=headerList,proto3" json:"header_list,omitempty"`
}

func (x *ProtoHeaderList) Reset() {
	*x = ProtoHeaderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHeaderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHeaderList) ProtoMessage() {}

func (x *ProtoHeaderList) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHeaderList.ProtoReflect.Descriptor instead.
func (*ProtoHeaderList) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{3}
}

func (x *ProtoHeaderList) GetHeaderList() []*ProtoBlockHeader {
	if x != nil {
		return x.HeaderList
	}
	return nil
}

type BlockIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`      //区块Hash
	Height int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"` //区块高度
}

func (x *BlockIndex) Reset() {
	*x = BlockIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIndex) ProtoMessage() {}

func (x *BlockIndex) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIndex.ProtoReflect.Descriptor instead.
func (*BlockIndex) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{4}
}

func (x *BlockIndex) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockIndex) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type SyncIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerId string        `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"` //节点ID
	Index  []*BlockIndex `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty"`                 //同步索引
}

func (x *SyncIndex) Reset() {
	*x = SyncIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncIndex) ProtoMessage() {}

func (x *SyncIndex) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncIndex.ProtoReflect.Descriptor instead.
func (*SyncIndex) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{5}
}

func (x *SyncIndex) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *SyncIndex) GetIndex() []*BlockIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

type GetPeerReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                           // 节点ID
	Services []ServiceFlag `protobuf:"varint,2,rep,packed,name=services,proto3,enum=wire.ServiceFlag" json:"services,omitempty"` // 服务能力
}

func (x *GetPeerReq) Reset() {
	*x = GetPeerReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerReq) ProtoMessage() {}

func (x *GetPeerReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerReq.ProtoReflect.Descriptor instead.
func (*GetPeerReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{6}
}

func (x *GetPeerReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetPeerReq) GetServices() []ServiceFlag {
	if x != nil {
		return x.Services
	}
	return nil
}

type GetPeerRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerList []*ProtoPersistentPeer `protobuf:"bytes,1,rep,name=peer_list,json=peerList,proto3" json:"peer_list,omitempty"`
}

func (x *GetPeerRes) Reset() {
	*x = GetPeerRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPeerRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerRes) ProtoMessage() {}

func (x *GetPeerRes) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerRes.ProtoReflect.Descriptor instead.
func (*GetPeerRes) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{7}
}

func (x *GetPeerRes) GetPeerList() []*ProtoPersistentPeer {
	if x != nil {
		return x.PeerList
	}
	return nil
}

type GetTxByAddressReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` //地址
}

func (x *GetTxByAddressReq) Reset() {
	*x = GetTxByAddressReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxByAddressReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxByAddressReq) ProtoMessage() {}

func (x *GetTxByAddressReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxByAddressReq.ProtoReflect.Descriptor instead.
func (*GetTxByAddressReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{8}
}

func (x *GetTxByAddressReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetTxByAddressRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txs []*JsonTx `protobuf:"bytes,1,rep,name=Txs,proto3" json:"Txs,omitempty"` //未确认交易
}

func (x *GetTxByAddressRes) Reset() {
	*x = GetTxByAddressRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxByAddressRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxByAddressRes) ProtoMessage() {}

func (x *GetTxByAddressRes) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxByAddressRes.ProtoReflect.Descriptor instead.
func (*GetTxByAddressRes) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{9}
}

func (x *GetTxByAddressRes) GetTxs() []*JsonTx {
	if x != nil {
		return x.Txs
	}
	return nil
}

type TransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic    string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`                          //助记词
	Index       uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                               //输出索引
	AddressType string `protobuf:"bytes,3,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"` //地址类型
	NetType     string `protobuf:"bytes,4,opt,name=net_type,json=netType,proto3" json:"net_type,omitempty"`             //地址类型
	ToAddress   string `protobuf:"bytes,5,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`       //目标地址
	Amount      int64  `protobuf:"varint,6,opt,name=amount,proto3" json:"amount,omitempty"`                             // 金额（聪）
}

func (x *TransferReq) Reset() {
	*x = TransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferReq) ProtoMessage() {}

func (x *TransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferReq.ProtoReflect.Descriptor instead.
func (*TransferReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{10}
}

func (x *TransferReq) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *TransferReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TransferReq) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *TransferReq) GetNetType() string {
	if x != nil {
		return x.NetType
	}
	return ""
}

func (x *TransferReq) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *TransferReq) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type TxLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`    //区块Hash
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"` //交易所在位置
}

func (x *TxLocation) Reset() {
	*x = TxLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxLocation) ProtoMessage() {}

func (x *TxLocation) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxLocation.ProtoReflect.Descriptor instead.
func (*TxLocation) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{11}
}

func (x *TxLocation) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *TxLocation) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// 根据Hash获取区块
type GetBlockByHashReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetBlockByHashReq) Reset() {
	*x = GetBlockByHashReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHashReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHashReq) ProtoMessage() {}

func (x *GetBlockByHashReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHashReq.ProtoReflect.Descriptor instead.
func (*GetBlockByHashReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{12}
}

func (x *GetBlockByHashReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type GetBlockByHeightReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockByHeightReq) Reset() {
	*x = GetBlockByHeightReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockByHeightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockByHeightReq) ProtoMessage() {}

func (x *GetBlockByHeightReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockByHeightReq.ProtoReflect.Descriptor instead.
func (*GetBlockByHeightReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{13}
}

func (x *GetBlockByHeightReq) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetTxByTxIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *GetTxByTxIdReq) Reset() {
	*x = GetTxByTxIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTxByTxIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTxByTxIdReq) ProtoMessage() {}

func (x *GetTxByTxIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTxByTxIdReq.ProtoReflect.Descriptor instead.
func (*GetTxByTxIdReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{14}
}

func (x *GetTxByTxIdReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type GetUTXOByTxIdAndOutIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId  string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"` //交易ID
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`          //输出索引
}

func (x *GetUTXOByTxIdAndOutIndexReq) Reset() {
	*x = GetUTXOByTxIdAndOutIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUTXOByTxIdAndOutIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUTXOByTxIdAndOutIndexReq) ProtoMessage() {}

func (x *GetUTXOByTxIdAndOutIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUTXOByTxIdAndOutIndexReq.ProtoReflect.Descriptor instead.
func (*GetUTXOByTxIdAndOutIndexReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{15}
}

func (x *GetUTXOByTxIdAndOutIndexReq) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *GetUTXOByTxIdAndOutIndexReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CreateEthAddressByMnemonicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"` //助记词
	Index    uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`      //输出索引
}

func (x *CreateEthAddressByMnemonicReq) Reset() {
	*x = CreateEthAddressByMnemonicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEthAddressByMnemonicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEthAddressByMnemonicReq) ProtoMessage() {}

func (x *CreateEthAddressByMnemonicReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEthAddressByMnemonicReq.ProtoReflect.Descriptor instead.
func (*CreateEthAddressByMnemonicReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{16}
}

func (x *CreateEthAddressByMnemonicReq) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *CreateEthAddressByMnemonicReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CreateBtcAddressByMnemonicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic    string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`                          //助记词
	Index       uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`                               //输出索引
	AddressType string `protobuf:"bytes,3,opt,name=address_type,json=addressType,proto3" json:"address_type,omitempty"` //地址类型
	NetType     string `protobuf:"bytes,4,opt,name=net_type,json=netType,proto3" json:"net_type,omitempty"`             //地址类型
}

func (x *CreateBtcAddressByMnemonicReq) Reset() {
	*x = CreateBtcAddressByMnemonicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBtcAddressByMnemonicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBtcAddressByMnemonicReq) ProtoMessage() {}

func (x *CreateBtcAddressByMnemonicReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBtcAddressByMnemonicReq.ProtoReflect.Descriptor instead.
func (*CreateBtcAddressByMnemonicReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{17}
}

func (x *CreateBtcAddressByMnemonicReq) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *CreateBtcAddressByMnemonicReq) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateBtcAddressByMnemonicReq) GetAddressType() string {
	if x != nil {
		return x.AddressType
	}
	return ""
}

func (x *CreateBtcAddressByMnemonicReq) GetNetType() string {
	if x != nil {
		return x.NetType
	}
	return ""
}

type EthAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` //地址
	Index   uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`    //输出索引
}

func (x *EthAddress) Reset() {
	*x = EthAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthAddress) ProtoMessage() {}

func (x *EthAddress) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthAddress.ProtoReflect.Descriptor instead.
func (*EthAddress) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{18}
}

func (x *EthAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *EthAddress) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type BtcAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` //地址
	Index   uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`    //输出索引
}

func (x *BtcAddress) Reset() {
	*x = BtcAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BtcAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BtcAddress) ProtoMessage() {}

func (x *BtcAddress) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BtcAddress.ProtoReflect.Descriptor instead.
func (*BtcAddress) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{19}
}

func (x *BtcAddress) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BtcAddress) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type CreateWalletReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 //钱包名称
	Password     string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`         //明文密码
	PasswordHint string `protobuf:"bytes,3,opt,name=passwordHint,proto3" json:"passwordHint,omitempty"` //密码提示
}

func (x *CreateWalletReq) Reset() {
	*x = CreateWalletReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletReq) ProtoMessage() {}

func (x *CreateWalletReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletReq.ProtoReflect.Descriptor instead.
func (*CreateWalletReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{20}
}

func (x *CreateWalletReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateWalletReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateWalletReq) GetPasswordHint() string {
	if x != nil {
		return x.PasswordHint
	}
	return ""
}

type JsonWallet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 //钱包名称
	Password     string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`         //明文密码
	PasswordHint string `protobuf:"bytes,3,opt,name=passwordHint,proto3" json:"passwordHint,omitempty"` //密码提示
	Mnemonic     string `protobuf:"bytes,4,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`         //助记词
}

func (x *JsonWallet) Reset() {
	*x = JsonWallet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonWallet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonWallet) ProtoMessage() {}

func (x *JsonWallet) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonWallet.ProtoReflect.Descriptor instead.
func (*JsonWallet) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{21}
}

func (x *JsonWallet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JsonWallet) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *JsonWallet) GetPasswordHint() string {
	if x != nil {
		return x.PasswordHint
	}
	return ""
}

func (x *JsonWallet) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

// ProtoPersistentPeer 扩展版：参考 btcd 节点存储逻辑
type ProtoPersistentPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 基础标识（原有字段保留并扩展）
	ID       string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                              // libp2p PeerID 字符串
	Addrs    []string `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`                        // 多地址列表（multiaddr 字符串）
	LastSeen int64    `protobuf:"varint,3,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"` // 最后活跃时间戳（秒级）
	// 1. 连接元数据（新增）
	Direction   ConnectionDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=wire.ConnectionDirection" json:"direction,omitempty"` // 连接方向
	ConnTime    int64               `protobuf:"varint,5,opt,name=conn_time,json=connTime,proto3" json:"conn_time,omitempty"`                 // 连接建立时间戳
	DisconnTime int64               `protobuf:"varint,6,opt,name=disconn_time,json=disconnTime,proto3" json:"disconn_time,omitempty"`        // 最后断开时间戳（-1 表示当前连接）
	UserAgent   string              `protobuf:"bytes,7,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`               // 用户代理（如 /myblockchain-v0.1.0/libp2p/）
	// 2. 协议与能力（新增）
	ProtocolVersion uint32        `protobuf:"varint,8,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"` // 协商后的 P2P 协议版本
	Services        []ServiceFlag `protobuf:"varint,9,rep,packed,name=services,proto3,enum=wire.ServiceFlag" json:"services,omitempty"`         // 支持的服务能力
	SupportedMsgs   []string      `protobuf:"bytes,10,rep,name=supported_msgs,json=supportedMsgs,proto3" json:"supported_msgs,omitempty"`       // 支持的消息类型列表
	// 3. 连接质量（新增）
	Rtt         uint32            `protobuf:"varint,11,opt,name=rtt,proto3" json:"rtt,omitempty"`                                                                                                                   // 往返延迟（毫秒）
	MsgCount    map[string]uint64 `protobuf:"bytes,12,rep,name=msg_count,json=msgCount,proto3" json:"msg_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 消息类型统计（如 "block": 100）
	BytesSent   uint64            `protobuf:"varint,13,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`                                                                                      // 累计发送字节数
	BytesRecv   uint64            `protobuf:"varint,14,opt,name=bytes_recv,json=bytesRecv,proto3" json:"bytes_recv,omitempty"`                                                                                      // 累计接收字节数
	UptimeRatio float32           `protobuf:"fixed32,15,opt,name=uptime_ratio,json=uptimeRatio,proto3" json:"uptime_ratio,omitempty"`                                                                               // 历史 uptime 占比（0.0~1.0）
	// 4. 安全与行为（新增）
	BanScore        uint32          `protobuf:"varint,16,opt,name=ban_score,json=banScore,proto3" json:"ban_score,omitempty"`                                                // 违规积分（达到阈值封禁）
	BanUntil        int64           `protobuf:"varint,17,opt,name=ban_until,json=banUntil,proto3" json:"ban_until,omitempty"`                                                // 封禁截止时间戳（-1 表示未封禁）
	LastErr         string          `protobuf:"bytes,18,opt,name=last_err,json=lastErr,proto3" json:"last_err,omitempty"`                                                    // 最后一次错误信息
	HandshakeStatus HandshakeStatus `protobuf:"varint,19,opt,name=handshake_status,json=handshakeStatus,proto3,enum=wire.HandshakeStatus" json:"handshake_status,omitempty"` // 握手状态
	// 5. 重连策略（新增）
	RetryCount         uint32 `protobuf:"varint,20,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`          // 历史重连次数
	RetryInterval      uint32 `protobuf:"varint,21,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"` // 下次重连间隔（秒）
	IsTrusted          bool   `protobuf:"varint,22,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted,omitempty"`             // 是否为可信节点
	IsOnline           bool   `protobuf:"varint,23,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                // 是否为可信节点
	FeeFilter          int64  `protobuf:"varint,24,opt,name=fee_filter,json=feeFilter,proto3" json:"fee_filter,omitempty"`             // 手续费过滤
	LastAnnouncedBlock []byte `protobuf:"bytes,25,opt,name=last_announced_block,json=lastAnnouncedBlock,proto3" json:"last_announced_block,omitempty"`
	LastBlockHeight    int32  `protobuf:"varint,26,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
}

func (x *ProtoPersistentPeer) Reset() {
	*x = ProtoPersistentPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoPersistentPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoPersistentPeer) ProtoMessage() {}

func (x *ProtoPersistentPeer) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoPersistentPeer.ProtoReflect.Descriptor instead.
func (*ProtoPersistentPeer) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{22}
}

func (x *ProtoPersistentPeer) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ProtoPersistentPeer) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *ProtoPersistentPeer) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *ProtoPersistentPeer) GetDirection() ConnectionDirection {
	if x != nil {
		return x.Direction
	}
	return ConnectionDirection_DIR_UNKNOWN
}

func (x *ProtoPersistentPeer) GetConnTime() int64 {
	if x != nil {
		return x.ConnTime
	}
	return 0
}

func (x *ProtoPersistentPeer) GetDisconnTime() int64 {
	if x != nil {
		return x.DisconnTime
	}
	return 0
}

func (x *ProtoPersistentPeer) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ProtoPersistentPeer) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ProtoPersistentPeer) GetServices() []ServiceFlag {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ProtoPersistentPeer) GetSupportedMsgs() []string {
	if x != nil {
		return x.SupportedMsgs
	}
	return nil
}

func (x *ProtoPersistentPeer) GetRtt() uint32 {
	if x != nil {
		return x.Rtt
	}
	return 0
}

func (x *ProtoPersistentPeer) GetMsgCount() map[string]uint64 {
	if x != nil {
		return x.MsgCount
	}
	return nil
}

func (x *ProtoPersistentPeer) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *ProtoPersistentPeer) GetBytesRecv() uint64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

func (x *ProtoPersistentPeer) GetUptimeRatio() float32 {
	if x != nil {
		return x.UptimeRatio
	}
	return 0
}

func (x *ProtoPersistentPeer) GetBanScore() uint32 {
	if x != nil {
		return x.BanScore
	}
	return 0
}

func (x *ProtoPersistentPeer) GetBanUntil() int64 {
	if x != nil {
		return x.BanUntil
	}
	return 0
}

func (x *ProtoPersistentPeer) GetLastErr() string {
	if x != nil {
		return x.LastErr
	}
	return ""
}

func (x *ProtoPersistentPeer) GetHandshakeStatus() HandshakeStatus {
	if x != nil {
		return x.HandshakeStatus
	}
	return HandshakeStatus_HANDSHAKE_NOT_STARTED
}

func (x *ProtoPersistentPeer) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ProtoPersistentPeer) GetRetryInterval() uint32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *ProtoPersistentPeer) GetIsTrusted() bool {
	if x != nil {
		return x.IsTrusted
	}
	return false
}

func (x *ProtoPersistentPeer) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *ProtoPersistentPeer) GetFeeFilter() int64 {
	if x != nil {
		return x.FeeFilter
	}
	return 0
}

func (x *ProtoPersistentPeer) GetLastAnnouncedBlock() []byte {
	if x != nil {
		return x.LastAnnouncedBlock
	}
	return nil
}

func (x *ProtoPersistentPeer) GetLastBlockHeight() int32 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

// 根据区块Hash查询 输出给用户的完整区块JSON
type JsonBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         string    `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Height       int32     `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	ChainWork    string    `protobuf:"bytes,10,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
	Version      int32     `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	PrevBlock    string    `protobuf:"bytes,4,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`
	MerkleRoot   string    `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp    int64     `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bits         uint32    `protobuf:"varint,7,opt,name=bits,proto3" json:"bits,omitempty"`
	Nonce        uint32    `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	IsMainChain  bool      `protobuf:"varint,13,opt,name=is_main_chain,json=isMainChain,proto3" json:"is_main_chain,omitempty"` //是否主链区块
	Transactions []*JsonTx `protobuf:"bytes,12,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *JsonBlock) Reset() {
	*x = JsonBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonBlock) ProtoMessage() {}

func (x *JsonBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonBlock.ProtoReflect.Descriptor instead.
func (*JsonBlock) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{23}
}

func (x *JsonBlock) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *JsonBlock) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *JsonBlock) GetChainWork() string {
	if x != nil {
		return x.ChainWork
	}
	return ""
}

func (x *JsonBlock) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *JsonBlock) GetPrevBlock() string {
	if x != nil {
		return x.PrevBlock
	}
	return ""
}

func (x *JsonBlock) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *JsonBlock) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *JsonBlock) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *JsonBlock) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *JsonBlock) GetIsMainChain() bool {
	if x != nil {
		return x.IsMainChain
	}
	return false
}

func (x *JsonBlock) GetTransactions() []*JsonTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 根据交易ID查询 输出给用户的完整交易JSON
type JsonTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId     string           `protobuf:"bytes,5,opt,name=txId,proto3" json:"txId,omitempty"`                          //交易ID
	Version  int32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                   // 不变
	TxIn     []*ProtoTxInDTO  `protobuf:"bytes,2,rep,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`              // 引用 DTO 版本的交易输入
	TxOut    []*ProtoTxOutDTO `protobuf:"bytes,3,rep,name=tx_out,json=txOut,proto3" json:"tx_out,omitempty"`           // 引用 DTO 版本的交易输出
	LockTime uint32           `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"` // 不变
}

func (x *JsonTx) Reset() {
	*x = JsonTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonTx) ProtoMessage() {}

func (x *JsonTx) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonTx.ProtoReflect.Descriptor instead.
func (*JsonTx) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{24}
}

func (x *JsonTx) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *JsonTx) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *JsonTx) GetTxIn() []*ProtoTxInDTO {
	if x != nil {
		return x.TxIn
	}
	return nil
}

func (x *JsonTx) GetTxOut() []*ProtoTxOutDTO {
	if x != nil {
		return x.TxOut
	}
	return nil
}

func (x *JsonTx) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

// 根据交易ID和输出索引查询UTXO
type JsonUTXO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`                              // 金额（聪）
	PkScript    string `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`           // 锁定脚本
	BlockHeight int32  `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // 产出该 UTXO 的区块高度
	PackedFlags uint32 `protobuf:"varint,4,opt,name=packed_flags,json=packedFlags,proto3" json:"packed_flags,omitempty"` // 位标志（tfCoinBase / tfSpent / tfModified / tfFresh）
}

func (x *JsonUTXO) Reset() {
	*x = JsonUTXO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonUTXO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonUTXO) ProtoMessage() {}

func (x *JsonUTXO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonUTXO.ProtoReflect.Descriptor instead.
func (*JsonUTXO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{25}
}

func (x *JsonUTXO) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *JsonUTXO) GetPkScript() string {
	if x != nil {
		return x.PkScript
	}
	return ""
}

func (x *JsonUTXO) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *JsonUTXO) GetPackedFlags() uint32 {
	if x != nil {
		return x.PackedFlags
	}
	return 0
}

type GetMainBlockByHeightReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height int32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"` // 区块高度
}

func (x *GetMainBlockByHeightReq) Reset() {
	*x = GetMainBlockByHeightReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMainBlockByHeightReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMainBlockByHeightReq) ProtoMessage() {}

func (x *GetMainBlockByHeightReq) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMainBlockByHeightReq.ProtoReflect.Descriptor instead.
func (*GetMainBlockByHeightReq) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{26}
}

func (x *GetMainBlockByHeightReq) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetAddressAllUtxoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // 待查询的地址（String类型，如比特币Base58/Bech32格式地址）
}

func (x *GetAddressAllUtxoRequest) Reset() {
	*x = GetAddressAllUtxoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressAllUtxoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressAllUtxoRequest) ProtoMessage() {}

func (x *GetAddressAllUtxoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressAllUtxoRequest.ProtoReflect.Descriptor instead.
func (*GetAddressAllUtxoRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{27}
}

func (x *GetAddressAllUtxoRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// 定义区块列表消息，用于GetAllBlock的返回
type BlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*ProtoMsgBlock `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"` // 重复字段表示数组
}

func (x *BlockList) Reset() {
	*x = BlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockList) ProtoMessage() {}

func (x *BlockList) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockList.ProtoReflect.Descriptor instead.
func (*BlockList) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{28}
}

func (x *BlockList) GetBlocks() []*ProtoMsgBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// 定义UTXO列表消息，用于GetAllUTXO的返回
type UtxoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Utxos        []*ProtoUtxoEntry `protobuf:"bytes,1,rep,name=utxos,proto3" json:"utxos,omitempty"` // 重复字段表示数组
	TotalCount   int32             `protobuf:"varint,2,opt,name=TotalCount,proto3" json:"TotalCount,omitempty"`
	TotalBalance int64             `protobuf:"varint,3,opt,name=TotalBalance,proto3" json:"TotalBalance,omitempty"`
}

func (x *UtxoList) Reset() {
	*x = UtxoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UtxoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UtxoList) ProtoMessage() {}

func (x *UtxoList) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UtxoList.ProtoReflect.Descriptor instead.
func (*UtxoList) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{29}
}

func (x *UtxoList) GetUtxos() []*ProtoUtxoEntry {
	if x != nil {
		return x.Utxos
	}
	return nil
}

func (x *UtxoList) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *UtxoList) GetTotalBalance() int64 {
	if x != nil {
		return x.TotalBalance
	}
	return 0
}

type SubmitTxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonData string `protobuf:"bytes,1,opt,name=json_data,json=jsonData,proto3" json:"json_data,omitempty"` // 存储交易的 JSON 字符串
}

func (x *SubmitTxRequest) Reset() {
	*x = SubmitTxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTxRequest) ProtoMessage() {}

func (x *SubmitTxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTxRequest.ProtoReflect.Descriptor instead.
func (*SubmitTxRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{30}
}

func (x *SubmitTxRequest) GetJsonData() string {
	if x != nil {
		return x.JsonData
	}
	return ""
}

// 请求头
type BaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"` // 节点唯一标识（正式环境必填，测试环境可选）
}

func (x *BaseRequest) Reset() {
	*x = BaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseRequest) ProtoMessage() {}

func (x *BaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseRequest.ProtoReflect.Descriptor instead.
func (*BaseRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{31}
}

func (x *BaseRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

// 通用返回包装
type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`      // 0 = success
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // 错误详情
	Data    []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`       // 任意 protobuf 序列化后的 payload
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{32}
}

func (x *CommonResp) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CommonResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// -------------------------- gRPC 请求/回复 DTO --------------------------
// 获取区块请求 DTO（保持原结构）
type GetBlockRequestDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"` // 不变（区块高度）
}

func (x *GetBlockRequestDTO) Reset() {
	*x = GetBlockRequestDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequestDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequestDTO) ProtoMessage() {}

func (x *GetBlockRequestDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequestDTO.ProtoReflect.Descriptor instead.
func (*GetBlockRequestDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{33}
}

func (x *GetBlockRequestDTO) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

// 获取区块回复 DTO（返回 DTO 版本的区块）
type GetBlockReplyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *ProtoMsgBlockDTO `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"` // 引用 DTO 版本的完整区块
}

func (x *GetBlockReplyDTO) Reset() {
	*x = GetBlockReplyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockReplyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockReplyDTO) ProtoMessage() {}

func (x *GetBlockReplyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockReplyDTO.ProtoReflect.Descriptor instead.
func (*GetBlockReplyDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{34}
}

func (x *GetBlockReplyDTO) GetBlock() *ProtoMsgBlockDTO {
	if x != nil {
		return x.Block
	}
	return nil
}

// gRPC 请求 / 回复
type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height uint32 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{35}
}

func (x *GetBlockRequest) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type GetBlockReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *ProtoMsgBlock `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockReply) Reset() {
	*x = GetBlockReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockReply) ProtoMessage() {}

func (x *GetBlockReply) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockReply.ProtoReflect.Descriptor instead.
func (*GetBlockReply) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{36}
}

func (x *GetBlockReply) GetBlock() *ProtoMsgBlock {
	if x != nil {
		return x.Block
	}
	return nil
}

type ProtoTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid   []byte      `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`      // 32 字节大端哈希
	Tx     *ProtoMsgTx `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`          // protobuf 编码后的完整交易
	Size   int64       `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`     // 字节大小
	Weight int64       `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"` // weight
	Fee    string      `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`        // 手续费（聪）
}

func (x *ProtoTx) Reset() {
	*x = ProtoTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTx) ProtoMessage() {}

func (x *ProtoTx) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTx.ProtoReflect.Descriptor instead.
func (*ProtoTx) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{37}
}

func (x *ProtoTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *ProtoTx) GetTx() *ProtoMsgTx {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ProtoTx) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProtoTx) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProtoTx) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type ProtoTxDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid   string         `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"` // hex txid
	Tx     *ProtoMsgTxDTO `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	Size   int64          `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Weight int64          `protobuf:"varint,4,opt,name=weight,proto3" json:"weight,omitempty"`
	Fee    string         `protobuf:"bytes,5,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (x *ProtoTxDTO) Reset() {
	*x = ProtoTxDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTxDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTxDTO) ProtoMessage() {}

func (x *ProtoTxDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTxDTO.ProtoReflect.Descriptor instead.
func (*ProtoTxDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{38}
}

func (x *ProtoTxDTO) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ProtoTxDTO) GetTx() *ProtoMsgTxDTO {
	if x != nil {
		return x.Tx
	}
	return nil
}

func (x *ProtoTxDTO) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ProtoTxDTO) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProtoTxDTO) GetFee() string {
	if x != nil {
		return x.Fee
	}
	return ""
}

type ProtoTxIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash     []byte   `protobuf:"bytes,1,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"` // 32 bytes
	PrevIndex    uint32   `protobuf:"varint,2,opt,name=prev_index,json=prevIndex,proto3" json:"prev_index,omitempty"`
	ScriptSig    []byte   `protobuf:"bytes,3,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`
	Sequence     uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	WitnessStack [][]byte `protobuf:"bytes,5,rep,name=witness_stack,json=witnessStack,proto3" json:"witness_stack,omitempty"` // 新增
}

func (x *ProtoTxIn) Reset() {
	*x = ProtoTxIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTxIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTxIn) ProtoMessage() {}

func (x *ProtoTxIn) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTxIn.ProtoReflect.Descriptor instead.
func (*ProtoTxIn) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{39}
}

func (x *ProtoTxIn) GetPrevHash() []byte {
	if x != nil {
		return x.PrevHash
	}
	return nil
}

func (x *ProtoTxIn) GetPrevIndex() uint32 {
	if x != nil {
		return x.PrevIndex
	}
	return 0
}

func (x *ProtoTxIn) GetScriptSig() []byte {
	if x != nil {
		return x.ScriptSig
	}
	return nil
}

func (x *ProtoTxIn) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ProtoTxIn) GetWitnessStack() [][]byte {
	if x != nil {
		return x.WitnessStack
	}
	return nil
}

type ProtoTxOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PkScript []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`
}

func (x *ProtoTxOut) Reset() {
	*x = ProtoTxOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTxOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTxOut) ProtoMessage() {}

func (x *ProtoTxOut) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTxOut.ProtoReflect.Descriptor instead.
func (*ProtoTxOut) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{40}
}

func (x *ProtoTxOut) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoTxOut) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

type ProtoMsgTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  int32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	TxIn     []*ProtoTxIn  `protobuf:"bytes,2,rep,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`
	TxOut    []*ProtoTxOut `protobuf:"bytes,3,rep,name=tx_out,json=txOut,proto3" json:"tx_out,omitempty"`
	LockTime uint32        `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
}

func (x *ProtoMsgTx) Reset() {
	*x = ProtoMsgTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgTx) ProtoMessage() {}

func (x *ProtoMsgTx) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgTx.ProtoReflect.Descriptor instead.
func (*ProtoMsgTx) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{41}
}

func (x *ProtoMsgTx) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProtoMsgTx) GetTxIn() []*ProtoTxIn {
	if x != nil {
		return x.TxIn
	}
	return nil
}

func (x *ProtoMsgTx) GetTxOut() []*ProtoTxOut {
	if x != nil {
		return x.TxOut
	}
	return nil
}

func (x *ProtoMsgTx) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

type ProtoOutPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`    // 32-byte previous txid
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"` // output index
}

func (x *ProtoOutPoint) Reset() {
	*x = ProtoOutPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOutPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOutPoint) ProtoMessage() {}

func (x *ProtoOutPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOutPoint.ProtoReflect.Descriptor instead.
func (*ProtoOutPoint) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{42}
}

func (x *ProtoOutPoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ProtoOutPoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// txoFlags 在 proto 里用 uint32 保存位标志
type ProtoUtxoEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`                              // 金额（聪）
	PkScript    []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`           // 锁定脚本
	BlockHeight int32  `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // 产出该 UTXO 的区块高度
	PackedFlags uint32 `protobuf:"varint,4,opt,name=packed_flags,json=packedFlags,proto3" json:"packed_flags,omitempty"` // 位标志（tfCoinBase / tfSpent / tfModified / tfFresh）
}

func (x *ProtoUtxoEntry) Reset() {
	*x = ProtoUtxoEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoUtxoEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUtxoEntry) ProtoMessage() {}

func (x *ProtoUtxoEntry) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUtxoEntry.ProtoReflect.Descriptor instead.
func (*ProtoUtxoEntry) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{43}
}

func (x *ProtoUtxoEntry) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProtoUtxoEntry) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

func (x *ProtoUtxoEntry) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ProtoUtxoEntry) GetPackedFlags() uint32 {
	if x != nil {
		return x.PackedFlags
	}
	return 0
}

// 区块头部
type ProtoBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                        // 4 字节
	PrevBlock  []byte `protobuf:"bytes,2,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`    // 32 字节
	MerkleRoot []byte `protobuf:"bytes,3,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"` // 32 字节
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // 8 字节
	Bits       uint32 `protobuf:"varint,5,opt,name=bits,proto3" json:"bits,omitempty"`                              // 4 字节
	Nonce      uint32 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`                            // 4 字节
}

func (x *ProtoBlockHeader) Reset() {
	*x = ProtoBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBlockHeader) ProtoMessage() {}

func (x *ProtoBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBlockHeader.ProtoReflect.Descriptor instead.
func (*ProtoBlockHeader) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{44}
}

func (x *ProtoBlockHeader) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProtoBlockHeader) GetPrevBlock() []byte {
	if x != nil {
		return x.PrevBlock
	}
	return nil
}

func (x *ProtoBlockHeader) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *ProtoBlockHeader) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProtoBlockHeader) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *ProtoBlockHeader) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// 存储在数据库中的区块头
type ProtoDbBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *ProtoBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ChainWork []byte            `protobuf:"bytes,2,opt,name=chain_work,json=chainWork,proto3" json:"chain_work,omitempty"`
}

func (x *ProtoDbBlockHeader) Reset() {
	*x = ProtoDbBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoDbBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoDbBlockHeader) ProtoMessage() {}

func (x *ProtoDbBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoDbBlockHeader.ProtoReflect.Descriptor instead.
func (*ProtoDbBlockHeader) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{45}
}

func (x *ProtoDbBlockHeader) GetHeader() *ProtoBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProtoDbBlockHeader) GetChainWork() []byte {
	if x != nil {
		return x.ChainWork
	}
	return nil
}

// 完整区块
type ProtoMsgBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ProtoBlockHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*ProtoMsgTx     `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ProtoMsgBlock) Reset() {
	*x = ProtoMsgBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgBlock) ProtoMessage() {}

func (x *ProtoMsgBlock) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgBlock.ProtoReflect.Descriptor instead.
func (*ProtoMsgBlock) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{46}
}

func (x *ProtoMsgBlock) GetHeader() *ProtoBlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProtoMsgBlock) GetTransactions() []*ProtoMsgTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 区块体
type ProtoMsgBlockBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash         []byte        `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Transactions []*ProtoMsgTx `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *ProtoMsgBlockBody) Reset() {
	*x = ProtoMsgBlockBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgBlockBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgBlockBody) ProtoMessage() {}

func (x *ProtoMsgBlockBody) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgBlockBody.ProtoReflect.Descriptor instead.
func (*ProtoMsgBlockBody) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{47}
}

func (x *ProtoMsgBlockBody) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *ProtoMsgBlockBody) GetTransactions() []*ProtoMsgTx {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 完成「基础通信能力确认」和「关键元信息交换」，确保双方后续能高效、兼容地进行业务交互。
// 握手或者版本消息
type ProtoHandshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion int32         `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`   //节点使用的协议版本（如比特币的 70016）
	Services        []ServiceFlag `protobuf:"varint,2,rep,packed,name=services,proto3,enum=wire.ServiceFlag" json:"services,omitempty"`           //节点支持的服务标识
	Timestamp       int64         `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                      //消息生成时间戳 1. 检测异常节点（如时间戳偏差过大，可能是恶意节点）；2. 后续超时逻辑的基础（如 “多久没响应算断开”）
	Nonce           uint64        `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`                                              //通信标识：检测自我连接（比如配置错误连到自己，收到相同的 Nonce 就断开），避免资源浪费
	UserAgent       string        `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`                      //节点软件标识（如 Bitcoin Core 25.0.0）
	GenesisHash     []byte        `protobuf:"bytes,6,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`                //创世区块hash 可以从这里知道两条链的基本参数是否一致 创世区块的输出脚本信息有难度 出块时间等等信息
	LastBlockHeight int32         `protobuf:"varint,7,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"` //状态对齐：快速判断同步方向（比如我是 1000 高度，对方是 1200，就知道要从它同步后续区块）
	DisableRelayTx  bool          `protobuf:"varint,8,opt,name=disable_relay_tx,json=disableRelayTx,proto3" json:"disable_relay_tx,omitempty"`    //资源优化：轻节点可能不需要交易转发，避免给它发无效交易数据，节省带宽
	FeeFilter       int64         `protobuf:"varint,9,opt,name=fee_filter,json=feeFilter,proto3" json:"fee_filter,omitempty"`
	WitnessEnabled  bool          `protobuf:"varint,10,opt,name=witness_enabled,json=witnessEnabled,proto3" json:"witness_enabled,omitempty"`
	LatestHeight    int32         `protobuf:"varint,11,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"` //最新高度
	LatestHash      []byte        `protobuf:"bytes,12,opt,name=latest_hash,json=latestHash,proto3" json:"latest_hash,omitempty"`        //最新hash
}

func (x *ProtoHandshake) Reset() {
	*x = ProtoHandshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHandshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHandshake) ProtoMessage() {}

func (x *ProtoHandshake) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHandshake.ProtoReflect.Descriptor instead.
func (*ProtoHandshake) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{48}
}

func (x *ProtoHandshake) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ProtoHandshake) GetServices() []ServiceFlag {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ProtoHandshake) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProtoHandshake) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ProtoHandshake) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *ProtoHandshake) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *ProtoHandshake) GetLastBlockHeight() int32 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *ProtoHandshake) GetDisableRelayTx() bool {
	if x != nil {
		return x.DisableRelayTx
	}
	return false
}

func (x *ProtoHandshake) GetFeeFilter() int64 {
	if x != nil {
		return x.FeeFilter
	}
	return 0
}

func (x *ProtoHandshake) GetWitnessEnabled() bool {
	if x != nil {
		return x.WitnessEnabled
	}
	return false
}

func (x *ProtoHandshake) GetLatestHeight() int32 {
	if x != nil {
		return x.LatestHeight
	}
	return 0
}

func (x *ProtoHandshake) GetLatestHash() []byte {
	if x != nil {
		return x.LatestHash
	}
	return nil
}

// 回复时携带自己的节点信息
type ProtoHandshakeAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handshake *ProtoHandshake `protobuf:"bytes,1,opt,name=handshake,proto3" json:"handshake,omitempty"`
}

func (x *ProtoHandshakeAck) Reset() {
	*x = ProtoHandshakeAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHandshakeAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHandshakeAck) ProtoMessage() {}

func (x *ProtoHandshakeAck) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHandshakeAck.ProtoReflect.Descriptor instead.
func (*ProtoHandshakeAck) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{49}
}

func (x *ProtoHandshakeAck) GetHandshake() *ProtoHandshake {
	if x != nil {
		return x.Handshake
	}
	return nil
}

// -------------------------- 交易相关 DTO --------------------------
// 交易输入 DTO（哈希字段转为 Hex 字符串）
type ProtoTxInDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevHash     string   `protobuf:"bytes,1,opt,name=prev_hash,json=prevHash,proto3" json:"prev_hash,omitempty"`             // 原 bytes → Hex 字符串（32字节哈希的十六进制表示）
	PrevIndex    uint32   `protobuf:"varint,2,opt,name=prev_index,json=prevIndex,proto3" json:"prev_index,omitempty"`         // 不变
	ScriptSig    string   `protobuf:"bytes,3,opt,name=script_sig,json=scriptSig,proto3" json:"script_sig,omitempty"`          // 脚本保持二进制（通常无需人类可读）
	Sequence     uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`                            // 不变
	WitnessStack [][]byte `protobuf:"bytes,5,rep,name=witness_stack,json=witnessStack,proto3" json:"witness_stack,omitempty"` // 见证数据保持二进制（特殊场景使用）
}

func (x *ProtoTxInDTO) Reset() {
	*x = ProtoTxInDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTxInDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTxInDTO) ProtoMessage() {}

func (x *ProtoTxInDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTxInDTO.ProtoReflect.Descriptor instead.
func (*ProtoTxInDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{50}
}

func (x *ProtoTxInDTO) GetPrevHash() string {
	if x != nil {
		return x.PrevHash
	}
	return ""
}

func (x *ProtoTxInDTO) GetPrevIndex() uint32 {
	if x != nil {
		return x.PrevIndex
	}
	return 0
}

func (x *ProtoTxInDTO) GetScriptSig() string {
	if x != nil {
		return x.ScriptSig
	}
	return ""
}

func (x *ProtoTxInDTO) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ProtoTxInDTO) GetWitnessStack() [][]byte {
	if x != nil {
		return x.WitnessStack
	}
	return nil
}

// 交易输出 DTO（无需改哈希，保持原结构）
type ProtoTxOutDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`                      // 不变（金额，单位：聪）
	PkScript string `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"` // 锁定脚本保持二进制
}

func (x *ProtoTxOutDTO) Reset() {
	*x = ProtoTxOutDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoTxOutDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoTxOutDTO) ProtoMessage() {}

func (x *ProtoTxOutDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoTxOutDTO.ProtoReflect.Descriptor instead.
func (*ProtoTxOutDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{51}
}

func (x *ProtoTxOutDTO) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *ProtoTxOutDTO) GetPkScript() string {
	if x != nil {
		return x.PkScript
	}
	return ""
}

// 完整交易 DTO
type ProtoMsgTxDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  int32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                   // 不变
	TxIn     []*ProtoTxInDTO  `protobuf:"bytes,2,rep,name=tx_in,json=txIn,proto3" json:"tx_in,omitempty"`              // 引用 DTO 版本的交易输入
	TxOut    []*ProtoTxOutDTO `protobuf:"bytes,3,rep,name=tx_out,json=txOut,proto3" json:"tx_out,omitempty"`           // 引用 DTO 版本的交易输出
	LockTime uint32           `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"` // 不变
}

func (x *ProtoMsgTxDTO) Reset() {
	*x = ProtoMsgTxDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgTxDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgTxDTO) ProtoMessage() {}

func (x *ProtoMsgTxDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgTxDTO.ProtoReflect.Descriptor instead.
func (*ProtoMsgTxDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{52}
}

func (x *ProtoMsgTxDTO) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProtoMsgTxDTO) GetTxIn() []*ProtoTxInDTO {
	if x != nil {
		return x.TxIn
	}
	return nil
}

func (x *ProtoMsgTxDTO) GetTxOut() []*ProtoTxOutDTO {
	if x != nil {
		return x.TxOut
	}
	return nil
}

func (x *ProtoMsgTxDTO) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

// 交易引用点 DTO（哈希字段转为 Hex 字符串）
type ProtoOutPointDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash  string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`    // 原 bytes → Hex 字符串（32字节交易哈希）
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"` // 不变（输出索引）
}

func (x *ProtoOutPointDTO) Reset() {
	*x = ProtoOutPointDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoOutPointDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoOutPointDTO) ProtoMessage() {}

func (x *ProtoOutPointDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoOutPointDTO.ProtoReflect.Descriptor instead.
func (*ProtoOutPointDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{53}
}

func (x *ProtoOutPointDTO) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *ProtoOutPointDTO) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// -------------------------- UTXO 相关 DTO --------------------------
// UTXO 条目 DTO（保持原结构，脚本无需转 Hex）
type ProtoUtxoEntryDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount      int64  `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`                              // 不变（金额，单位：聪）
	PkScript    []byte `protobuf:"bytes,2,opt,name=pk_script,json=pkScript,proto3" json:"pk_script,omitempty"`           // 锁定脚本保持二进制
	BlockHeight int32  `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"` // 不变（产出区块高度）
	PackedFlags uint32 `protobuf:"varint,4,opt,name=packed_flags,json=packedFlags,proto3" json:"packed_flags,omitempty"` // 不变（位标志）
}

func (x *ProtoUtxoEntryDTO) Reset() {
	*x = ProtoUtxoEntryDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoUtxoEntryDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoUtxoEntryDTO) ProtoMessage() {}

func (x *ProtoUtxoEntryDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoUtxoEntryDTO.ProtoReflect.Descriptor instead.
func (*ProtoUtxoEntryDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{54}
}

func (x *ProtoUtxoEntryDTO) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ProtoUtxoEntryDTO) GetPkScript() []byte {
	if x != nil {
		return x.PkScript
	}
	return nil
}

func (x *ProtoUtxoEntryDTO) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ProtoUtxoEntryDTO) GetPackedFlags() uint32 {
	if x != nil {
		return x.PackedFlags
	}
	return 0
}

// -------------------------- 区块相关 DTO --------------------------
// 区块头 DTO（哈希字段转为 Hex 字符串）
type ProtoBlockHeaderDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int32  `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`                        // 不变
	PrevBlock  string `protobuf:"bytes,2,opt,name=prev_block,json=prevBlock,proto3" json:"prev_block,omitempty"`    // 原 bytes → Hex 字符串（前区块哈希）
	MerkleRoot string `protobuf:"bytes,3,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"` // 原 bytes → Hex 字符串（默克尔根哈希）
	Timestamp  int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                    // 不变（时间戳）
	Bits       uint32 `protobuf:"varint,5,opt,name=bits,proto3" json:"bits,omitempty"`                              // 不变（难度值）
	Nonce      uint32 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`                            // 不变（随机数）
}

func (x *ProtoBlockHeaderDTO) Reset() {
	*x = ProtoBlockHeaderDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoBlockHeaderDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoBlockHeaderDTO) ProtoMessage() {}

func (x *ProtoBlockHeaderDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoBlockHeaderDTO.ProtoReflect.Descriptor instead.
func (*ProtoBlockHeaderDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{55}
}

func (x *ProtoBlockHeaderDTO) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProtoBlockHeaderDTO) GetPrevBlock() string {
	if x != nil {
		return x.PrevBlock
	}
	return ""
}

func (x *ProtoBlockHeaderDTO) GetMerkleRoot() string {
	if x != nil {
		return x.MerkleRoot
	}
	return ""
}

func (x *ProtoBlockHeaderDTO) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ProtoBlockHeaderDTO) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *ProtoBlockHeaderDTO) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

// 完整区块 DTO
type ProtoMsgBlockDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ProtoBlockHeaderDTO `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`             // 引用 DTO 版本的区块头
	Transactions []*ProtoMsgTxDTO     `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"` // 引用 DTO 版本的交易列表
}

func (x *ProtoMsgBlockDTO) Reset() {
	*x = ProtoMsgBlockDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgBlockDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgBlockDTO) ProtoMessage() {}

func (x *ProtoMsgBlockDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgBlockDTO.ProtoReflect.Descriptor instead.
func (*ProtoMsgBlockDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{56}
}

func (x *ProtoMsgBlockDTO) GetHeader() *ProtoBlockHeaderDTO {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProtoMsgBlockDTO) GetTransactions() []*ProtoMsgTxDTO {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 区块体 DTO
type ProtoMsgBlockBodyDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*ProtoMsgTxDTO `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"` // 引用 DTO 版本的交易列表
}

func (x *ProtoMsgBlockBodyDTO) Reset() {
	*x = ProtoMsgBlockBodyDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoMsgBlockBodyDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoMsgBlockBodyDTO) ProtoMessage() {}

func (x *ProtoMsgBlockBodyDTO) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoMsgBlockBodyDTO.ProtoReflect.Descriptor instead.
func (*ProtoMsgBlockBodyDTO) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{57}
}

func (x *ProtoMsgBlockBodyDTO) GetTransactions() []*ProtoMsgTxDTO {
	if x != nil {
		return x.Transactions
	}
	return nil
}

// 统一消息帧
type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`                            // 枚举：1 = handshake，2 = ack ...
	NeedReply bool   `protobuf:"varint,2,opt,name=need_reply,json=needReply,proto3" json:"need_reply,omitempty"` // 是否需要对方回复
	ReqId     uint64 `protobuf:"varint,3,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`             // 随机 id，用于匹配请求/响应
	Body      []byte `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`                             // 业务负载
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{58}
}

func (x *Message) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Message) GetNeedReply() bool {
	if x != nil {
		return x.NeedReply
	}
	return false
}

func (x *Message) GetReqId() uint64 {
	if x != nil {
		return x.ReqId
	}
	return 0
}

func (x *Message) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// 握手消息示例（body 可对应此结构）
type Handshake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion int32  `protobuf:"varint,1,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	GenesisHash     []byte `protobuf:"bytes,2,opt,name=genesis_hash,json=genesisHash,proto3" json:"genesis_hash,omitempty"`
	LatestHeight    int64  `protobuf:"varint,3,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	LatestHash      []byte `protobuf:"bytes,4,opt,name=latest_hash,json=latestHash,proto3" json:"latest_hash,omitempty"`
	PeerId          string `protobuf:"bytes,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *Handshake) Reset() {
	*x = Handshake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Handshake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Handshake) ProtoMessage() {}

func (x *Handshake) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Handshake.ProtoReflect.Descriptor instead.
func (*Handshake) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{59}
}

func (x *Handshake) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *Handshake) GetGenesisHash() []byte {
	if x != nil {
		return x.GenesisHash
	}
	return nil
}

func (x *Handshake) GetLatestHeight() int64 {
	if x != nil {
		return x.LatestHeight
	}
	return 0
}

func (x *Handshake) GetLatestHash() []byte {
	if x != nil {
		return x.LatestHash
	}
	return nil
}

func (x *Handshake) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

type Ack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EchoReqId uint64 `protobuf:"varint,1,opt,name=echo_req_id,json=echoReqId,proto3" json:"echo_req_id,omitempty"` // 回显原 req_id
	Payload   []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`                         // 可选附加数据
}

func (x *Ack) Reset() {
	*x = Ack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{60}
}

func (x *Ack) GetEchoReqId() uint64 {
	if x != nil {
		return x.EchoReqId
	}
	return 0
}

func (x *Ack) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 表示32字节的哈希（与你的Hash类型对应）
type ProtoHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"` // 存储哈希的原始字节（长度固定为32）
}

func (x *ProtoHash) Reset() {
	*x = ProtoHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHash) ProtoMessage() {}

func (x *ProtoHash) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHash.ProtoReflect.Descriptor instead.
func (*ProtoHash) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{61}
}

func (x *ProtoHash) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// 哈希集合（对应Go中的map[Hash]struct{}）
type ProtoHashSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hashes []*ProtoHash `protobuf:"bytes,1,rep,name=hashes,proto3" json:"hashes,omitempty"` // 用repeated存储多个哈希（集合去重逻辑在代码中处理）
}

func (x *ProtoHashSet) Reset() {
	*x = ProtoHashSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoHashSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoHashSet) ProtoMessage() {}

func (x *ProtoHashSet) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoHashSet.ProtoReflect.Descriptor instead.
func (*ProtoHashSet) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{62}
}

func (x *ProtoHashSet) GetHashes() []*ProtoHash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// 库存向量结构体（对应InvVect）
type ProtoInvVect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type InvType `protobuf:"varint,1,opt,name=type,proto3,enum=wire.InvType" json:"type,omitempty"` // 数据类型
	Hash []byte  `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`                    // 数据哈希（对应chainhash.Hash的字节形式）
}

func (x *ProtoInvVect) Reset() {
	*x = ProtoInvVect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoInvVect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoInvVect) ProtoMessage() {}

func (x *ProtoInvVect) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoInvVect.ProtoReflect.Descriptor instead.
func (*ProtoInvVect) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{63}
}

func (x *ProtoInvVect) GetType() InvType {
	if x != nil {
		return x.Type
	}
	return InvType_INV_TYPE_ERROR
}

func (x *ProtoInvVect) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ProtoRelayMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvVect *ProtoInvVect `protobuf:"bytes,1,opt,name=invVect,proto3" json:"invVect,omitempty"`
	Data    []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProtoRelayMsg) Reset() {
	*x = ProtoRelayMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bitcoin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoRelayMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoRelayMsg) ProtoMessage() {}

func (x *ProtoRelayMsg) ProtoReflect() protoreflect.Message {
	mi := &file_bitcoin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoRelayMsg.ProtoReflect.Descriptor instead.
func (*ProtoRelayMsg) Descriptor() ([]byte, []int) {
	return file_bitcoin_proto_rawDescGZIP(), []int{64}
}

func (x *ProtoRelayMsg) GetInvVect() *ProtoInvVect {
	if x != nil {
		return x.InvVect
	}
	return nil
}

func (x *ProtoRelayMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_bitcoin_proto protoreflect.FileDescriptor

var file_bitcoin_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x4a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x2c, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x6e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x4a, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x0a, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x4c, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x4b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x22, 0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x36,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42,
	0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x33, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x54, 0x78,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x03, 0x54, 0x78, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x36, 0x0a, 0x0a, 0x54, 0x78, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x2d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x25, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55,
	0x54, 0x58, 0x4f, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x51, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6e, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3c, 0x0a, 0x0a, 0x45, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3c, 0x0a, 0x0a, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x65, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x0a, 0x4a, 0x73,
	0x6f, 0x6e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x22, 0xff, 0x07, 0x0a, 0x13, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x64, 0x64, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x74, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x74, 0x74, 0x12, 0x44,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x65, 0x72, 0x2e, 0x4d, 0x73, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x73, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x53,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63,
	0x76, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x72, 0x72, 0x12, 0x40, 0x0a, 0x10, 0x68, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0f, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61,
	0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x4a,
	0x73, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x57,
	0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4d, 0x61, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x78, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x06,
	0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x54, 0x78, 0x49, 0x6e, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x74, 0x78, 0x49, 0x6e, 0x12, 0x2a, 0x0a,
	0x06, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44,
	0x54, 0x4f, 0x52, 0x05, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x55,
	0x54, 0x58, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x31,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0x34, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41,
	0x6c, 0x6c, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x7a, 0x0a, 0x08, 0x55, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x74, 0x78, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x75, 0x74, 0x78, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x2e, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a,
	0x0b, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x54, 0x4f, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x3a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x7d, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x02, 0x74,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0a,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x02, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x52,
	0x02, 0x74, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x65,
	0x65, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x49, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x3f, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x92, 0x01, 0x0a,
	0x0a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x54, 0x78, 0x49, 0x6e, 0x52, 0x04, 0x74, 0x78, 0x49, 0x6e, 0x12, 0x27, 0x0a, 0x06, 0x74,
	0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x52, 0x05, 0x74,
	0x78, 0x4f, 0x75, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x39, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8b, 0x01, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x55, 0x74, 0x78, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x22, 0x63, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x62, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x22, 0x75, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5d, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc4, 0x03, 0x0a,
	0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x66, 0x65, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x47, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x41, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64,
	0x73, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x49, 0x6e, 0x44, 0x54, 0x4f, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x53, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x22, 0x42, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x44, 0x54, 0x4f, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x9b, 0x01,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x78, 0x5f,
	0x69, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x78, 0x49, 0x6e, 0x44, 0x54, 0x4f, 0x52, 0x04, 0x74, 0x78,
	0x49, 0x6e, 0x12, 0x2a, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x54,
	0x78, 0x4f, 0x75, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x05, 0x74, 0x78, 0x4f, 0x75, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x55, 0x74, 0x78, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x54, 0x4f, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6b, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6b, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x44,
	0x54, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x69, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x22, 0x7e, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x54, 0x4f, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x44, 0x54, 0x4f, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73,
	0x67, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x6f, 0x64, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x37, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d,
	0x73, 0x67, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb8,
	0x01, 0x0a, 0x09, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x03, 0x41, 0x63, 0x6b,
	0x12, 0x1e, 0x0a, 0x0b, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x63, 0x68, 0x6f, 0x52, 0x65, 0x71, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x21, 0x0a, 0x09, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49,
	0x6e, 0x76, 0x56, 0x65, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x76, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x51, 0x0a,
	0x0d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x2c,
	0x0a, 0x07, 0x69, 0x6e, 0x76, 0x56, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x49, 0x6e, 0x76, 0x56,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x56, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x2a, 0x49, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x52, 0x5f,
	0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x52,
	0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x0f, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x41, 0x4e,
	0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x41, 0x4e, 0x44, 0x53, 0x48, 0x41, 0x4b, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xa6, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x56, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65,
	0x47, 0x65, 0x74, 0x55, 0x54, 0x58, 0x4f, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x46, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x10, 0x40, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x46,
	0x4e, 0x6f, 0x64, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x10, 0x80, 0x01, 0x12, 0x10,
	0x0a, 0x0b, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x58, 0x74, 0x68, 0x69, 0x6e, 0x10, 0x80, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x69, 0x74, 0x35, 0x10, 0x80,
	0x04, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x46, 0x10, 0x80, 0x08,
	0x12, 0x0d, 0x0a, 0x08, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x58, 0x10, 0x80, 0x10, 0x12,
	0x19, 0x0a, 0x14, 0x53, 0x46, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x80, 0x20, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x46,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x32, 0x50, 0x56, 0x32, 0x10, 0x80, 0x40, 0x2a, 0xc5, 0x01, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x49, 0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x58, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x13, 0x49, 0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x58, 0x10, 0x81, 0x80, 0x80, 0x80, 0x04, 0x12, 0x1e, 0x0a, 0x16, 0x49,
	0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x82, 0x80, 0x80, 0x80, 0x04, 0x12, 0x27, 0x0a, 0x1f, 0x49,
	0x4e, 0x56, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x57, 0x49, 0x54, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x83,
	0x80, 0x80, 0x80, 0x04, 0x32, 0xfd, 0x0d, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x70, 0x63, 0x12, 0x2b, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x15, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x54, 0x4f, 0x12, 0x18, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x54,
	0x4f, 0x1a, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x37, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78,
	0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2b, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x15, 0x4a,
	0x73, 0x6f, 0x6e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x44, 0x54, 0x4f, 0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x0d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55,
	0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x1e, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c,
	0x6c, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x54, 0x4f, 0x12, 0x2d, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x17, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x2e, 0x77, 0x69, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42,
	0x79, 0x54, 0x78, 0x49, 0x64, 0x12, 0x14, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x54, 0x58, 0x4f, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x54, 0x58, 0x4f, 0x42, 0x79, 0x54, 0x78, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4f, 0x75, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x55, 0x54, 0x58, 0x4f, 0x12, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x0d, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x15, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x74,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x12, 0x23, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x45,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x79, 0x4d,
	0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x23, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x79, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x42, 0x74, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32,
	0x0a, 0x0f, 0x42, 0x69, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x12, 0x11, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x4a, 0x73, 0x6f, 0x6e,
	0x54, 0x78, 0x12, 0x4d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x54, 0x78, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x17, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x54, 0x78, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x2e, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x12, 0x3f,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x64, 0x48, 0x61,
	0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x50, 0x65, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x77, 0x69,
	0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x31, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x10,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x42, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x65, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x54,
	0x58, 0x4f, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x12, 0x1e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55, 0x74, 0x78, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x61, 0x65,
	0x55, 0x54, 0x58, 0x4f, 0x12, 0x1e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6c, 0x6c, 0x55, 0x74, 0x78, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x55, 0x74, 0x78, 0x6f,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x07, 0x5a, 0x05, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bitcoin_proto_rawDescOnce sync.Once
	file_bitcoin_proto_rawDescData = file_bitcoin_proto_rawDesc
)

func file_bitcoin_proto_rawDescGZIP() []byte {
	file_bitcoin_proto_rawDescOnce.Do(func() {
		file_bitcoin_proto_rawDescData = protoimpl.X.CompressGZIP(file_bitcoin_proto_rawDescData)
	})
	return file_bitcoin_proto_rawDescData
}

var file_bitcoin_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bitcoin_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_bitcoin_proto_goTypes = []interface{}{
	(ConnectionDirection)(0),              // 0: wire.ConnectionDirection
	(HandshakeStatus)(0),                  // 1: wire.HandshakeStatus
	(ServiceFlag)(0),                      // 2: wire.ServiceFlag
	(InvType)(0),                          // 3: wire.InvType
	(*ProtoBlockBodyList)(nil),            // 4: wire.ProtoBlockBodyList
	(*ProtoGetBlock)(nil),                 // 5: wire.ProtoGetBlock
	(*ProtoGetHeaders)(nil),               // 6: wire.ProtoGetHeaders
	(*ProtoHeaderList)(nil),               // 7: wire.ProtoHeaderList
	(*BlockIndex)(nil),                    // 8: wire.BlockIndex
	(*SyncIndex)(nil),                     // 9: wire.SyncIndex
	(*GetPeerReq)(nil),                    // 10: wire.GetPeerReq
	(*GetPeerRes)(nil),                    // 11: wire.GetPeerRes
	(*GetTxByAddressReq)(nil),             // 12: wire.GetTxByAddressReq
	(*GetTxByAddressRes)(nil),             // 13: wire.GetTxByAddressRes
	(*TransferReq)(nil),                   // 14: wire.TransferReq
	(*TxLocation)(nil),                    // 15: wire.TxLocation
	(*GetBlockByHashReq)(nil),             // 16: wire.GetBlockByHashReq
	(*GetBlockByHeightReq)(nil),           // 17: wire.GetBlockByHeightReq
	(*GetTxByTxIdReq)(nil),                // 18: wire.GetTxByTxIdReq
	(*GetUTXOByTxIdAndOutIndexReq)(nil),   // 19: wire.GetUTXOByTxIdAndOutIndexReq
	(*CreateEthAddressByMnemonicReq)(nil), // 20: wire.CreateEthAddressByMnemonicReq
	(*CreateBtcAddressByMnemonicReq)(nil), // 21: wire.CreateBtcAddressByMnemonicReq
	(*EthAddress)(nil),                    // 22: wire.EthAddress
	(*BtcAddress)(nil),                    // 23: wire.BtcAddress
	(*CreateWalletReq)(nil),               // 24: wire.CreateWalletReq
	(*JsonWallet)(nil),                    // 25: wire.JsonWallet
	(*ProtoPersistentPeer)(nil),           // 26: wire.ProtoPersistentPeer
	(*JsonBlock)(nil),                     // 27: wire.JsonBlock
	(*JsonTx)(nil),                        // 28: wire.JsonTx
	(*JsonUTXO)(nil),                      // 29: wire.JsonUTXO
	(*GetMainBlockByHeightReq)(nil),       // 30: wire.GetMainBlockByHeightReq
	(*GetAddressAllUtxoRequest)(nil),      // 31: wire.GetAddressAllUtxoRequest
	(*BlockList)(nil),                     // 32: wire.BlockList
	(*UtxoList)(nil),                      // 33: wire.UtxoList
	(*SubmitTxRequest)(nil),               // 34: wire.SubmitTxRequest
	(*BaseRequest)(nil),                   // 35: wire.BaseRequest
	(*CommonResp)(nil),                    // 36: wire.CommonResp
	(*GetBlockRequestDTO)(nil),            // 37: wire.GetBlockRequestDTO
	(*GetBlockReplyDTO)(nil),              // 38: wire.GetBlockReplyDTO
	(*GetBlockRequest)(nil),               // 39: wire.GetBlockRequest
	(*GetBlockReply)(nil),                 // 40: wire.GetBlockReply
	(*ProtoTx)(nil),                       // 41: wire.ProtoTx
	(*ProtoTxDTO)(nil),                    // 42: wire.ProtoTxDTO
	(*ProtoTxIn)(nil),                     // 43: wire.ProtoTxIn
	(*ProtoTxOut)(nil),                    // 44: wire.ProtoTxOut
	(*ProtoMsgTx)(nil),                    // 45: wire.ProtoMsgTx
	(*ProtoOutPoint)(nil),                 // 46: wire.ProtoOutPoint
	(*ProtoUtxoEntry)(nil),                // 47: wire.ProtoUtxoEntry
	(*ProtoBlockHeader)(nil),              // 48: wire.ProtoBlockHeader
	(*ProtoDbBlockHeader)(nil),            // 49: wire.ProtoDbBlockHeader
	(*ProtoMsgBlock)(nil),                 // 50: wire.ProtoMsgBlock
	(*ProtoMsgBlockBody)(nil),             // 51: wire.ProtoMsgBlockBody
	(*ProtoHandshake)(nil),                // 52: wire.ProtoHandshake
	(*ProtoHandshakeAck)(nil),             // 53: wire.ProtoHandshakeAck
	(*ProtoTxInDTO)(nil),                  // 54: wire.ProtoTxInDTO
	(*ProtoTxOutDTO)(nil),                 // 55: wire.ProtoTxOutDTO
	(*ProtoMsgTxDTO)(nil),                 // 56: wire.ProtoMsgTxDTO
	(*ProtoOutPointDTO)(nil),              // 57: wire.ProtoOutPointDTO
	(*ProtoUtxoEntryDTO)(nil),             // 58: wire.ProtoUtxoEntryDTO
	(*ProtoBlockHeaderDTO)(nil),           // 59: wire.ProtoBlockHeaderDTO
	(*ProtoMsgBlockDTO)(nil),              // 60: wire.ProtoMsgBlockDTO
	(*ProtoMsgBlockBodyDTO)(nil),          // 61: wire.ProtoMsgBlockBodyDTO
	(*Message)(nil),                       // 62: wire.Message
	(*Handshake)(nil),                     // 63: wire.Handshake
	(*Ack)(nil),                           // 64: wire.Ack
	(*ProtoHash)(nil),                     // 65: wire.ProtoHash
	(*ProtoHashSet)(nil),                  // 66: wire.ProtoHashSet
	(*ProtoInvVect)(nil),                  // 67: wire.ProtoInvVect
	(*ProtoRelayMsg)(nil),                 // 68: wire.ProtoRelayMsg
	nil,                                   // 69: wire.ProtoPersistentPeer.MsgCountEntry
}
var file_bitcoin_proto_depIdxs = []int32{
	51, // 0: wire.ProtoBlockBodyList.body_list:type_name -> wire.ProtoMsgBlockBody
	48, // 1: wire.ProtoHeaderList.header_list:type_name -> wire.ProtoBlockHeader
	8,  // 2: wire.SyncIndex.index:type_name -> wire.BlockIndex
	2,  // 3: wire.GetPeerReq.services:type_name -> wire.ServiceFlag
	26, // 4: wire.GetPeerRes.peer_list:type_name -> wire.ProtoPersistentPeer
	28, // 5: wire.GetTxByAddressRes.Txs:type_name -> wire.JsonTx
	0,  // 6: wire.ProtoPersistentPeer.direction:type_name -> wire.ConnectionDirection
	2,  // 7: wire.ProtoPersistentPeer.services:type_name -> wire.ServiceFlag
	69, // 8: wire.ProtoPersistentPeer.msg_count:type_name -> wire.ProtoPersistentPeer.MsgCountEntry
	1,  // 9: wire.ProtoPersistentPeer.handshake_status:type_name -> wire.HandshakeStatus
	28, // 10: wire.JsonBlock.transactions:type_name -> wire.JsonTx
	54, // 11: wire.JsonTx.tx_in:type_name -> wire.ProtoTxInDTO
	55, // 12: wire.JsonTx.tx_out:type_name -> wire.ProtoTxOutDTO
	50, // 13: wire.BlockList.blocks:type_name -> wire.ProtoMsgBlock
	47, // 14: wire.UtxoList.utxos:type_name -> wire.ProtoUtxoEntry
	60, // 15: wire.GetBlockReplyDTO.block:type_name -> wire.ProtoMsgBlockDTO
	50, // 16: wire.GetBlockReply.block:type_name -> wire.ProtoMsgBlock
	45, // 17: wire.ProtoTx.tx:type_name -> wire.ProtoMsgTx
	56, // 18: wire.ProtoTxDTO.tx:type_name -> wire.ProtoMsgTxDTO
	43, // 19: wire.ProtoMsgTx.tx_in:type_name -> wire.ProtoTxIn
	44, // 20: wire.ProtoMsgTx.tx_out:type_name -> wire.ProtoTxOut
	48, // 21: wire.ProtoDbBlockHeader.header:type_name -> wire.ProtoBlockHeader
	48, // 22: wire.ProtoMsgBlock.header:type_name -> wire.ProtoBlockHeader
	45, // 23: wire.ProtoMsgBlock.transactions:type_name -> wire.ProtoMsgTx
	45, // 24: wire.ProtoMsgBlockBody.transactions:type_name -> wire.ProtoMsgTx
	2,  // 25: wire.ProtoHandshake.services:type_name -> wire.ServiceFlag
	52, // 26: wire.ProtoHandshakeAck.handshake:type_name -> wire.ProtoHandshake
	54, // 27: wire.ProtoMsgTxDTO.tx_in:type_name -> wire.ProtoTxInDTO
	55, // 28: wire.ProtoMsgTxDTO.tx_out:type_name -> wire.ProtoTxOutDTO
	59, // 29: wire.ProtoMsgBlockDTO.header:type_name -> wire.ProtoBlockHeaderDTO
	56, // 30: wire.ProtoMsgBlockDTO.transactions:type_name -> wire.ProtoMsgTxDTO
	56, // 31: wire.ProtoMsgBlockBodyDTO.transactions:type_name -> wire.ProtoMsgTxDTO
	65, // 32: wire.ProtoHashSet.hashes:type_name -> wire.ProtoHash
	3,  // 33: wire.ProtoInvVect.type:type_name -> wire.InvType
	67, // 34: wire.ProtoRelayMsg.invVect:type_name -> wire.ProtoInvVect
	62, // 35: wire.BitCoinRpc.SendMessage:input_type -> wire.Message
	39, // 36: wire.BitCoinRpc.GetBlock:input_type -> wire.GetBlockRequest
	37, // 37: wire.BitCoinRpc.GetBlockDTO:input_type -> wire.GetBlockRequestDTO
	45, // 38: wire.BitCoinRpc.SubmitTransaction:input_type -> wire.ProtoMsgTx
	62, // 39: wire.BitCoinRpc.StartMining:input_type -> wire.Message
	62, // 40: wire.BitCoinRpc.StopMining:input_type -> wire.Message
	56, // 41: wire.BitCoinRpc.JsonSubmitTransaction:input_type -> wire.ProtoMsgTxDTO
	62, // 42: wire.BitCoinRpc.GetAllBlock:input_type -> wire.Message
	62, // 43: wire.BitCoinRpc.GetAllUTXO:input_type -> wire.Message
	31, // 44: wire.BitCoinRpc.GetAddressAllUTXO:input_type -> wire.GetAddressAllUtxoRequest
	30, // 45: wire.BitCoinRpc.GetMainBlockByHeight:input_type -> wire.GetMainBlockByHeightReq
	62, // 46: wire.BitCoinRpc.GetMainStatus:input_type -> wire.Message
	16, // 47: wire.BitCoinRpc.GetBlockByHash:input_type -> wire.GetBlockByHashReq
	17, // 48: wire.BitCoinRpc.GetBlockByHeight:input_type -> wire.GetBlockByHeightReq
	18, // 49: wire.BitCoinRpc.GetTxByTxId:input_type -> wire.GetTxByTxIdReq
	19, // 50: wire.BitCoinRpc.GetUTXOByTxIdAndOutIndex:input_type -> wire.GetUTXOByTxIdAndOutIndexReq
	62, // 51: wire.BitCoinRpc.GetAllConnectPeer:input_type -> wire.Message
	24, // 52: wire.BitCoinRpc.CreateWallet:input_type -> wire.CreateWalletReq
	20, // 53: wire.BitCoinRpc.CreateEthAddressByMnemonic:input_type -> wire.CreateEthAddressByMnemonicReq
	21, // 54: wire.BitCoinRpc.CreateBtcAddressByMnemonic:input_type -> wire.CreateBtcAddressByMnemonicReq
	14, // 55: wire.BitCoinRpc.BitCoinTransfer:input_type -> wire.TransferReq
	12, // 56: wire.BitCoinRpc.GetUnconfirmedTxByAddress:input_type -> wire.GetTxByAddressReq
	12, // 57: wire.BitCoinRpc.GetConfirmedTxByAddress:input_type -> wire.GetTxByAddressReq
	10, // 58: wire.BitCoinRpc.GetOnlineAndHandshakePeer:input_type -> wire.GetPeerReq
	10, // 59: wire.BitCoinRpc.GetPeerById:input_type -> wire.GetPeerReq
	26, // 60: wire.BitCoinRpc.GetPeerByCondition:input_type -> wire.ProtoPersistentPeer
	10, // 61: wire.BitCoinRpc.GetAllPeer:input_type -> wire.GetPeerReq
	31, // 62: wire.BitCoinRpc.GetUTXOByAddressAndCache:input_type -> wire.GetAddressAllUtxoRequest
	31, // 63: wire.BitCoinRpc.GetCachaeUTXO:input_type -> wire.GetAddressAllUtxoRequest
	62, // 64: wire.BitCoinRpc.SendMessage:output_type -> wire.Message
	40, // 65: wire.BitCoinRpc.GetBlock:output_type -> wire.GetBlockReply
	38, // 66: wire.BitCoinRpc.GetBlockDTO:output_type -> wire.GetBlockReplyDTO
	36, // 67: wire.BitCoinRpc.SubmitTransaction:output_type -> wire.CommonResp
	62, // 68: wire.BitCoinRpc.StartMining:output_type -> wire.Message
	62, // 69: wire.BitCoinRpc.StopMining:output_type -> wire.Message
	36, // 70: wire.BitCoinRpc.JsonSubmitTransaction:output_type -> wire.CommonResp
	32, // 71: wire.BitCoinRpc.GetAllBlock:output_type -> wire.BlockList
	33, // 72: wire.BitCoinRpc.GetAllUTXO:output_type -> wire.UtxoList
	33, // 73: wire.BitCoinRpc.GetAddressAllUTXO:output_type -> wire.UtxoList
	38, // 74: wire.BitCoinRpc.GetMainBlockByHeight:output_type -> wire.GetBlockReplyDTO
	62, // 75: wire.BitCoinRpc.GetMainStatus:output_type -> wire.Message
	27, // 76: wire.BitCoinRpc.GetBlockByHash:output_type -> wire.JsonBlock
	27, // 77: wire.BitCoinRpc.GetBlockByHeight:output_type -> wire.JsonBlock
	28, // 78: wire.BitCoinRpc.GetTxByTxId:output_type -> wire.JsonTx
	29, // 79: wire.BitCoinRpc.GetUTXOByTxIdAndOutIndex:output_type -> wire.JsonUTXO
	62, // 80: wire.BitCoinRpc.GetAllConnectPeer:output_type -> wire.Message
	25, // 81: wire.BitCoinRpc.CreateWallet:output_type -> wire.JsonWallet
	22, // 82: wire.BitCoinRpc.CreateEthAddressByMnemonic:output_type -> wire.EthAddress
	23, // 83: wire.BitCoinRpc.CreateBtcAddressByMnemonic:output_type -> wire.BtcAddress
	28, // 84: wire.BitCoinRpc.BitCoinTransfer:output_type -> wire.JsonTx
	13, // 85: wire.BitCoinRpc.GetUnconfirmedTxByAddress:output_type -> wire.GetTxByAddressRes
	13, // 86: wire.BitCoinRpc.GetConfirmedTxByAddress:output_type -> wire.GetTxByAddressRes
	11, // 87: wire.BitCoinRpc.GetOnlineAndHandshakePeer:output_type -> wire.GetPeerRes
	11, // 88: wire.BitCoinRpc.GetPeerById:output_type -> wire.GetPeerRes
	11, // 89: wire.BitCoinRpc.GetPeerByCondition:output_type -> wire.GetPeerRes
	11, // 90: wire.BitCoinRpc.GetAllPeer:output_type -> wire.GetPeerRes
	33, // 91: wire.BitCoinRpc.GetUTXOByAddressAndCache:output_type -> wire.UtxoList
	33, // 92: wire.BitCoinRpc.GetCachaeUTXO:output_type -> wire.UtxoList
	64, // [64:93] is the sub-list for method output_type
	35, // [35:64] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_bitcoin_proto_init() }
func file_bitcoin_proto_init() {
	if File_bitcoin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bitcoin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBlockBodyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoGetBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoGetHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHeaderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeerReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPeerRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxByAddressReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxByAddressRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHashReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockByHeightReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTxByTxIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUTXOByTxIdAndOutIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEthAddressByMnemonicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBtcAddressByMnemonicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BtcAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonWallet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoPersistentPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonUTXO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMainBlockByHeightReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressAllUtxoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UtxoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequestDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockReplyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTxDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTxIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTxOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOutPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoUtxoEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoDbBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgBlockBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHandshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHandshakeAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTxInDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoTxOutDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgTxDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoOutPointDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoUtxoEntryDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoBlockHeaderDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgBlockDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoMsgBlockBodyDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Handshake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoHashSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoInvVect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bitcoin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoRelayMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bitcoin_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bitcoin_proto_goTypes,
		DependencyIndexes: file_bitcoin_proto_depIdxs,
		EnumInfos:         file_bitcoin_proto_enumTypes,
		MessageInfos:      file_bitcoin_proto_msgTypes,
	}.Build()
	File_bitcoin_proto = out.File
	file_bitcoin_proto_rawDesc = nil
	file_bitcoin_proto_goTypes = nil
	file_bitcoin_proto_depIdxs = nil
}
